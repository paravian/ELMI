% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train.ELSIP.R
\name{train.ELSIPData}
\alias{train.ELSIPData}
\alias{train.multiELSIPData}
\title{ELSIP trainer}
\usage{
\method{train}{ELSIPData}(x, classifier, ...)

\method{train}{multiELSIPData}(x, classifier, ...)
}
\arguments{
\item{x}{An \code{\link{multiELSIPData}} object generated from
\code{\link[ELSIP:impute.ELSIPData]{impute}}.}

\item{classifier}{a list defining the model and model parameters to use
during classification of the multiply imputed training and testing data.
The list should contain the following named items:
\describe{
  \item{method}{a single length character vector indicating the
    classification method to use with \code{caret}.}
  \item{trainControl}{a list generated by
    \code{\link[caret:trainControl]{trainControl}}.}
  \item{tuneGrid}{a list defining the tuning grid to use for
    training the \code{caret} model.}
}}

\item{...}{Ignored.}
}
\value{
A \code{\link{ELSIPTrain}} or \code{\link{multiELSIPTrain}} object
  if \code{x} is a \code{\link{ELSIPData}} or
  \code{\link{multiELSIPData}} object respectively.
}
\description{
Thus function trains a classification model on either a single or multiple
datasets, depending on whether an \code{\link{ELSIPData}} or
\code{\link{multiELSIPData}} object is passed, respectively. Classification
is handled by \code{\link[caret]{train}} from the \code{caret} package, such
that any supported method can be used to train an ELSIP model. A full list
of classification models together with possible tuning parameters is
available at <https://topepo.github.io/caret/train-models-by-tag.html>. Note
that all \code{\link{ELSIPData}} or \code{\link{multiELSIPData}} objects are
not permitted to have any missing values prior to training. Use
\code{\link[ELSIP:impute.ELSIPData]{impute}} prior to model training.
}
\examples{
data(Chiappe2008)

m <- classifyPrepare(Chiappe2008,
                     label = "rectrices",
                     continuous = c("femur_l", "humerus_l", "ulna_l", "radius_l", "tibia_l"))
p <- partition(m, 0.8)
im <- impute(p, method = "mice_rf", n = 5)

# Define control parameters
tc <- trainControl(
  method = "cv",
  number = 10
)

# Define tuning grid for "nnet"
tg <- expand.grid(
  size = c(1, 2, 3),
  decay = c(0, 0.01, 0.05)
)

train(im, classifier = list(method = "nnet", trainControl = tc, tuneGrid = tg))
}
